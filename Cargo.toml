[workspace]
resolver = "1"

# NOTES:
# This workspace is intended to be used for the primary scrypto/radix engine library crates.
#
# In particular:
# * We purposefully don't include simulator - as it's an application, not a library
#   The simulator receives its own separate Cargo.lock, that we source control.
#   We don't source control the Cargo.lock for this workspace, because it's a workspace of libraries:
#   https://doc.rust-lang.org/cargo/faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries
#
# * We don't include any Scrypto packages here - they should be loaded/built separately, as they need separate profiles.
#   They either include their own shared workspace for a set of tests, or a [workspace] in each of their Cargo.tomls
#   to avoid falling back to the root workspace.

members = [
    "sbor",
    "sbor-derive-common",
    "sbor-derive",
    "sbor-tests",
    "scrypto-schema",
    "scrypto-derive",
    "scrypto",
    "scrypto-test",
    "scrypto-derive-tests",
    "transaction",
    "transaction-scenarios",
    "native-sdk",
    "radix-engine",
    "radix-engine-macros",
    "radix-engine-common",
    "radix-engine-interface",
    "radix-engine-derive",
    "radix-engine-store-interface",
    "radix-engine-stores",
    "radix-engine-tests",
    "radix-engine-queries",
    "radix-runtime-fuzzer",
    "radix-runtime-fuzzer-common",
    "radix-runtime-fuzzer-derive",
    "radix-runtime-fuzzer-tools",
    "monkey-tests",
    "utils",
    "radix-engine-profiling",
    "radix-engine-profiling/resources-tracker-macro",
]

# Both the release and test profiles use `panic = "unwind"` to allow certain parts of the Radix
# Engine to be able to catch panics. As an example, the native-vm has a `catch_unwind` to catch
# all panics that may occur in the native blueprints and convert them to `Result`s instead of
# crashing the engine.

[profile.release]
panic = "unwind"

[profile.test]
panic = "unwind"
